DROP TABLE COURSE CASCADE CONSTRAINTS;
DROP TABLE RESOURCETYPE CASCADE CONSTRAINTS;
DROP TABLE MEMBERTYPE CASCADE CONSTRAINTS;
DROP TABLE LRESOURCE CASCADE CONSTRAINTS;
DROP TABLE LIBRARYCARD CASCADE CONSTRAINTS;
DROP TABLE LOAN CASCADE CONSTRAINTS;
DROP TABLE FINE CASCADE CONSTRAINTS;
DROP VIEW LISTOFRESOURCES;
DROP VIEW LISTOF_STUDENTSANDSTAFF;
DROP VIEW CURRENT_LOANS;
DROP VIEW FINES;
DROP SEQUENCE resource_sequence;

CREATE TABLE COURSE (
    COURSENO VARCHAR2(30),
    COURSENAME VARCHAR2(80) NOT NULL,
    CONSTRAINT PK_COURSE PRIMARY KEY (COURSENO),
    CONSTRAINT UK_COURSE_COURSENAME UNIQUE(COURSENAME)
    );

CREATE TABLE RESOURCETYPE (
    RESOURCETYPEID NUMBER(2),
    RESOURCETYPE VARCHAR2(30) NOT NULL,
    CONSTRAINT PK_RESOURCETYPE PRIMARY KEY (RESOURCETYPEID)
    );

CREATE TABLE LRESOURCE (
    RESOURCEID NUMBER(10),
    COURSENO VARCHAR2(30),
    LOCATION VARCHAR2(100),
    RESOURCETYPEID NUMBER(2),
    RESOURCENAME VARCHAR2(100) NOT NULL,
    LOANPERIOD NUMBER(2) NOT NULL,
    AUTHOR VARCHAR2(100) NOT NULL,
    CONSTRAINT PK_RESOURCE PRIMARY KEY(RESOURCEID),
    CONSTRAINT FK_RESOURCE_COURSENO FOREIGN KEY(COURSENO)
        REFERENCES COURSE,
    CONSTRAINT FK_RESOURCE_RESOURCETYPE FOREIGN KEY(RESOURCETYPEID)
        REFERENCES RESOURCETYPE
    );

CREATE TABLE MEMBERTYPE (
    MEMBERTYPEID NUMBER(1),
    MEMBERTYPE VARCHAR2(10) NOT NULL,
    CONSTRAINT PK_MEMBERTYPE PRIMARY KEY(MEMBERTYPEID)
    );

 CREATE TABLE LIBRARYCARD (
    CARDID NUMBER(15),
    FIRSTNAME VARCHAR2(50) NOT NULL,
    LASTNAME VARCHAR2(50) NOT NULL,
    ISSUEDATE DATE NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL,
    ISSUSPENDED NUMBER(1) DEFAULT 0,
    MEMBERTYPEID NUMBER(1),
    CONSTRAINT PK_LIBRARYCARD PRIMARY KEY(CARDID),
    CONSTRAINT FK_LIBRARYCARD_MEMBERTYPEID FOREIGN KEY(MEMBERTYPEID)
        REFERENCES MEMBERTYPE,
    CHECK (EMAIL LIKE '%@%'),
    CHECK (EMAIL LIKE '%.%'),
    CHECK (ISSUSPENDED IN (0,1))
    );

    CREATE TABLE LOAN (
    LOANID NUMBER(10),
    CARDID NUMBER(15),
    RESOURCEID NUMBER(10),
    LOANDATE DATE NOT NULL,
    RETURNDATE DATE,
    CONSTRAINT PK_LOAN PRIMARY KEY (LOANID),
    CONSTRAINT FK_LOAN_CARDID FOREIGN KEY (CARDID)
        REFERENCES LIBRARYCARD,
    CONSTRAINT FK_LOAN_RESOURCEID FOREIGN KEY (RESOURCEID)
        REFERENCES LRESOURCE
    );
    
CREATE TABLE FINE (
    LOANID NUMBER(10),
    ISPAID NUMBER(1),
    PAYDATE DATE,
    FINEAMOUNT NUMBER(10),
    CONSTRAINT FK_FINE_LOANID FOREIGN KEY (LOANID)
        REFERENCES LOAN,
    CONSTRAINT UK_FINE_LOANID UNIQUE (LOANID),
    CHECK (ISPAID IN (0,1))
    );

-- create sequence for primary keys in resource table
CREATE SEQUENCE resource_sequence
 START WITH 1;

-- TRIGGER THAT INSERTS NEXT VALUE OF SEQUENCE AS PRIM KEY OF RESOURCE TABLE
CREATE OR REPLACE TRIGGER resource_on_insert
    BEFORE INSERT ON LRESOURCE
    FOR EACH ROW
BEGIN
    :NEW.RESOURCEID := resource_sequence.nextval;
END;
/

-- TRIGGER THAT CHECKS IF STORED VALUE OF FINEAMOUNT IS RIGHT BEFORE INSERTING
CREATE OR REPLACE TRIGGER fineamount_check_on_insert
BEFORE INSERT ON FINE
FOR EACH ROW
DECLARE
    VALIDAMOUNT NUMBER(10);
BEGIN
    SELECT ROUND((L.RETURNDATE - L.LOANDATE - R.LOANPERIOD), 3) INTO VALIDAMOUNT
    FROM LOAN L
    INNER JOIN LRESOURCE R ON L.RESOURCEID = R.RESOURCEID
    WHERE L.LOANID = :NEW.LOANID;
    
IF :NEW.FINEAMOUNT != VALIDAMOUNT
THEN
    raise_application_error(-20100, 'Fine amount does not match the dates');
END IF;
END;
/

-- prevent new loans if number of allowed loans for user is exceeded 
CREATE OR REPLACE TRIGGER limit_loans
BEFORE INSERT ON LOAN
FOR EACH ROW
DECLARE
    NUMOFLOANS NUMBER(5);
    LOANSLIMIT NUMBER(5);
BEGIN
    SELECT (CASE WHEN LC.MEMBERTYPEID = 0 THEN 5 ELSE 10 END) INTO LOANSLIMIT
    FROM LIBRARYCARD LC
    WHERE LC.CARDID=:NEW.CARDID;
    
    SELECT COUNT(*) INTO NUMOFLOANS
    FROM LOAN
    WHERE LOAN.RETURNDATE IS NULL AND LOAN.CARDID = :NEW.CARDID;

IF NUMOFLOANS >= LOANSLIMIT
THEN
    raise_application_error(-20100, 'Number of loans exceeded');
END IF;
END;
/

-- SUSPEND USER IF FINE IS > 10$
-- AFTER THE RETURNDATE IS SET

CREATE OR REPLACE TRIGGER suspend_check
AFTER UPDATE OF RETURNDATE ON LOAN
FOR EACH ROW
DECLARE 
    FINEAMOUNT NUMBER(10);
    LIBCARDID NUMBER(20);
BEGIN
    SELECT ROUND((:NEW.RETURNDATE - :OLD.LOANDATE - R.LOANPERIOD), 3) INTO FINEAMOUNT
    FROM LRESOURCE R 
    WHERE :OLD.RESOURCEID = R.RESOURCEID;
    LIBCARDID := :OLD.CARDID;

IF FINEAMOUNT > 10
THEN
    UPDATE LIBRARYCARD SET ISSUSPENDED = 1
    WHERE CARDID = LIBCARDID;
END IF;
END;
/
-- /* Insert values into course table */

INSERT INTO Course VALUES 
('BIO2476', 'Biomedical Science');
INSERT INTO Course VALUES 
('CLI2782', 'Clinical Psychology');
INSERT INTO Course VALUES 
('MEC5903', 'Mechanical Engineering');
INSERT INTO Course VALUES 
('COM4408', 'Computer Science');
INSERT INTO Course VALUES 
('GLO4825', 'Global Law');
INSERT INTO Course VALUES 
('ECO', 'Economics');
INSERT INTO Course VALUES 
('FIN1471', 'Finance');
INSERT INTO Course VALUES 
('ACC9997', 'Accounting and Management');
INSERT INTO Course VALUES 
('ENG5908', 'English Language');
INSERT INTO Course VALUES 
('DRA1343', 'Drama');
INSERT INTO Course VALUES 
('ROB7138', 'Robotics Engineering');
INSERT INTO Course VALUES 
('SOF7257', 'Software Engineering');
INSERT INTO Course VALUES 
('ENV2096', 'Environmental Science');

INSERT INTO RESOURCETYPE VALUES
(1, 'Book');
INSERT INTO RESOURCETYPE VALUES
(2, 'Video');
INSERT INTO RESOURCETYPE VALUES
(3, 'DVD');
INSERT INTO RESOURCETYPE VALUES
(4, 'CD');

/* Insert values into Resource table */
-- REPLACE IDS WITH SEQUENCE GENERATOR
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('BIO2476', 'F3S20', 1, 'Cell Structure and Function',  7,  'Guy Orchard and Brian Nation');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('CLI2782', 'F2S14', 2, 'What is Clinical Psychology?',  5,  'Susan P. Llewelyn and David J. Murphy');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('MEC5903', 'F3S17', 3, 'Basic Mechanical Engineering',  2,  'Mohan Sen');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('COM4408', 'F1S7', 1, 'Learn Python 3 the Hard Way',  7,  'Zed A. Shaw');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('GLO4825', 'F1S19', 1, 'Intimations of Global Law',  7,  'Neil Walker');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('ECO', 'F2S30', 2, 'Economisc',  5,  'Alain Anderton');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('FIN1471', 'F3S22', 1, 'The Finance Book',  7,  'Stuart Warner and Si Hussain');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('ACC9997', 'F2S21', 2, 'Financial and Management Accounting: An Introduction',  5,  'Prof Pauline Weetman');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('ENG5908', 'F3S44', 3, 'A History of the English Language',  2,  'Elly van Gelderen');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('DRA1343', 'F1S50', 4, 'The Theory and Analysis of Drama',  3,  'Manfred Pfister');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('ROB7138', 'F1S33', 1, 'Fundamentals of Robotics Engineering',  7,  'Harry H. Poole');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('SOF7257', 'F2S47', 1, 'Software Engineering and Quality Assurance',  7,  'A.A. Puntambekar');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('ENV2096', 'F1S9', 2, 'Basics of Environmental Science',  5,  'Michael Allaby');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('ECO', 'F2S39', 4, 'Political Geography',  3,  'Ramesh Dutta Dikshit');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('ECO', 'F3S5', 2, 'A History of Public Health',  5,  'George Rosen, Gwen Rosen and Edward T. Morman');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('GLO4825', 'F1S19', 1, 'Intimations of Global Law',  7,  'Neil Walker');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('ECO', 'F2S30', 2, 'Economisc',  5,  'Alain Anderton');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('FIN1471', 'F3S22', 1, 'The Finance Book',  7,  'Stuart Warner and Si Hussain');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('ACC9997', 'F2S21', 2, 'Financial and Management Accounting: An Introduction',  5,  'Prof Pauline Weetman');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('ENG5908', 'F3S44', 3, 'A History of the English Language',  2,  'Elly van Gelderen');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('DRA1343', 'F1S50', 4, 'The Theory and Analysis of Drama',  3,  'Manfred Pfister');
INSERT INTO LResource (COURSENO, LOCATION, RESOURCETYPEID, RESOURCENAME, LOANPERIOD, AUTHOR) VALUES
('ACC9997', 'F2S21', 2, 'Financial and Management Accounting: An Introduction',  5,  'Prof Pauline Weetman');

insert into MEMBERTYPE VALUES (0, 'STUDENT');
insert into MEMBERTYPE VALUES (1, 'STAFF');

/* Insert values into LIBRARYCARD table */
insert into LIBRARYCARD (cardid, firstname, lastname, email, ISSUEDATE, ISSUSPENDED, membertypeid) values (100373061, 'Sheff', 'LEstrange', 'slestrange0@earthlink.net', TO_DATE('12-Sep-2019', 'DD-MON-YYYY'),0,0);
insert into LIBRARYCARD (cardid, firstname, lastname, email, ISSUEDATE, ISSUSPENDED, membertypeid) values (295145912, 'Geoffrey', 'Braysher', 'gbraysher1@php.net', '23-Jul-2019',1,0);
insert into LIBRARYCARD (cardid, firstname, lastname, email, ISSUEDATE, ISSUSPENDED, membertypeid) values (635767446, 'Hillery', 'McGettrick', 'hmcgettrick2@mlb.com', '18-Oct-2020',0,0);
insert into LIBRARYCARD (cardid, firstname, lastname, email, ISSUEDATE, ISSUSPENDED, membertypeid) values (417782331, 'Nettie', 'Frigot', 'nfrigot3@foxnews.com', '11-Aug-2020',0,1);
insert into LIBRARYCARD (cardid, firstname, lastname, email, ISSUEDATE, ISSUSPENDED, membertypeid) values (435995120, 'Benedikt', 'Amner', 'bamner4@narod.ru', '29-Mar-2020',0,0);
insert into LIBRARYCARD (cardid, firstname, lastname, email, ISSUEDATE, ISSUSPENDED, membertypeid) values (297382959, 'Hogan', 'Darleston', 'hdarleston5@discovery.com', '25-May-2020', 0,1);
insert into LIBRARYCARD (cardid, firstname, lastname, email, ISSUEDATE, ISSUSPENDED, membertypeid) values (718693208, 'Flory', 'OCurran', 'focurran6@netscape.com', '22-Nov-2019', 0, 0);
insert into LIBRARYCARD (cardid, firstname, lastname, email, ISSUEDATE, ISSUSPENDED, membertypeid) values (520284834, 'Mickey', 'De Vuyst', 'mdevuyst7@umn.edu', '28-Apr-2019', 1, 0);
insert into LIBRARYCARD (cardid, firstname, lastname, email, ISSUEDATE, ISSUSPENDED, membertypeid) values (935012719, 'Dougy', 'Ruuffle', 'druffle8@umn.edu', '05-Aug-2020', 0, 1);
insert into LIBRARYCARD (cardid, firstname, lastname, email, ISSUEDATE, ISSUSPENDED, membertypeid) values (293155114, 'Gwenneth', 'Arrowsmith', 'garrowsmith9@dailymail.co.uk', '07-Jul-2020', 0, 1);
insert into LIBRARYCARD (cardid, firstname, lastname, email, ISSUEDATE, ISSUSPENDED, membertypeid) values (492010041, 'Merissa', 'Sloyan', 'lmsloyana@behance.net', '01-Sep-2019', 0, 0);
insert into LIBRARYCARD (cardid, firstname, lastname, email, ISSUEDATE, ISSUSPENDED, membertypeid) values (90496836, 'Sharlene', 'Oxlade', 'soxladeb@gnu.org', '13-Feb-2020', 0, 0);
insert into LIBRARYCARD (cardid, firstname, lastname, email, ISSUEDATE, ISSUSPENDED, membertypeid) values (172352102, 'Salvatore', 'Weatherell', 'sweatherellc@privacy.gov.au', '05-Aug-2020', 0, 1);
insert into LIBRARYCARD (cardid, firstname, lastname, email, ISSUEDATE, ISSUSPENDED, membertypeid) values (510427213, 'Jamal', 'Munning', 'jmunningd@eepurl.com', '16-Oct-2019', 0, 0);
insert into LIBRARYCARD (cardid, firstname, lastname, email, ISSUEDATE, ISSUSPENDED, membertypeid) values (72350962, 'Maribelle', 'Shoobridge', 'mshoobridgee@china.com.cn', '20-Mar-2020', 1, 0);


/* Insert data into Loan table */
INSERT INTO Loan VALUES
(1, 100373061, 1, TO_DATE('12-09-2019', 'DD-MM-YYYY'),  TO_DATE('15-09-2019', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(2, 295145912, 2, TO_DATE('23-07-2019', 'DD-MM-YYYY'),  TO_DATE('30-08-2019', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(3, 635767446, 3, TO_DATE('18-07-2019', 'DD-MM-YYYY'),  TO_DATE('19-07-2019', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(4, 417782331, 4, TO_DATE('11-08-2020', 'DD-MM-YYYY'),  TO_DATE('14-08-2020', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(5, 435995120, 5, TO_DATE('29-03-2020', 'DD-MM-YYYY'),   TO_DATE('30-03-2020', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(6, 297382959, 6, TO_DATE('25-05-2020', 'DD-MM-YYYY'),   TO_DATE('27-05-2020', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(7, 718693208, 7, TO_DATE('22-11-2019', 'DD-MM-YYYY'),   TO_DATE('23-11-2019', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(8, 520284834, 8, TO_DATE('28-04-2019', 'DD-MM-YYYY'),   TO_DATE('28-05-2019', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(9, 935012719, 9, TO_DATE('05-08-2020', 'DD-MM-YYYY'),   TO_DATE('05-08-2020', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(10, 293155114, 10, TO_DATE('07-07-2020', 'DD-MM-YYYY'),   TO_DATE('10-07-2020', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(11, 492010041, 11, TO_DATE('01-09-2019', 'DD-MM-YYYY'),   TO_DATE('01-11-2019', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(12, 90496836, 12, TO_DATE('13-02-2020', 'DD-MM-YYYY'),   TO_DATE('18-02-2020', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(13, 172352102, 13, TO_DATE('05-08-2020', 'DD-MM-YYYY'),   TO_DATE('06-08-2020', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(14, 510427213, 14, TO_DATE('16-10-2019', 'DD-MM-YYYY'),  TO_DATE('19-10-2019', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(15, 72350962, 15, TO_DATE('20-03-2020', 'DD-MM-YYYY'),  TO_DATE('05-04-2020', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(16, 72350962, 5, TO_DATE('20-03-2019', 'DD-MM-YYYY'),  TO_DATE('21-03-2019', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(17, 435995120, 7, TO_DATE('29-03-2020', 'DD-MM-YYYY'),  TO_DATE('30-03-2020', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(18, 435995120, 5, TO_DATE('30-03-2020', 'DD-MM-YYYY'),  TO_DATE('04-04-2020', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(19, 935012719, 10, TO_DATE('06-12-2020', 'DD-MM-YYYY'), TO_DATE('08-12-2020', 'DD-MM-YYYY'));
INSERT INTO Loan VALUES
(20, 72350962, 12, TO_DATE('15-11-2020', 'DD-MM-YYYY'), NULL);



INSERT INTO FINE VALUES (2, 1,TO_DATE('12-09-2020', 'DD-MM-YYYY'), 33);
INSERT INTO FINE VALUES (8, 1,TO_DATE('10-06-2020', 'DD-MM-YYYY'), 25);
INSERT INTO FINE VALUES (11, 1,TO_DATE('01-10-2020', 'DD-MM-YYYY'), 54);
INSERT INTO FINE VALUES (15, 1,TO_DATE('12-05-2020', 'DD-MM-YYYY'), 11);
INSERT INTO FINE VALUES (20, 0, NULL, NULL);



-- VIEW THAT LISTS RESOURCES WITH NUMBER OF COPIES AND TOTAL AMOUNT OF LOANS
CREATE VIEW LISTOFRESOURCES AS (
    SELECT DISTINCT R.RESOURCENAME, R.AUTHOR, R.LOCATION, C.COURSENAME , 
    RT.RESOURCETYPE, R.LOANPERIOD, 
    (SELECT COUNT(*) FROM LRESOURCE R2 WHERE R.RESOURCENAME=R2.RESOURCENAME) "NUMBER OF COPIES",
    (SELECT COUNT(*) FROM LOAN WHERE R.RESOURCEID = LOAN.RESOURCEID) "TOTAL NUM OF LOANS"
    FROM LRESOURCE R
    INNER JOIN COURSE C ON C.COURSENO = R.COURSENO
    INNER JOIN RESOURCETYPE RT ON RT.RESOURCETYPEID = R.RESOURCETYPEID
);

-- LIST OF STUDENTS AND STAFF 
CREATE VIEW LISTOF_STUDENTSANDSTAFF AS (SELECT CARDID, FIRSTNAME, LASTNAME, ISSUEDATE, EMAIL,
(CASE WHEN ISSUSPENDED = 1 THEN 'Yes' ELSE 'No' END) "IS SUSPENDED",
MT.MEMBERTYPE,
(SELECT COUNT(*) FROM LOAN L WHERE L.CARDID = LIBRARYCARD.CARDID AND L.RETURNDATE IS NULL) "NUMBER OF CURRENT LOANS"
FROM LIBRARYCARD, MEMBERTYPE MT
WHERE LIBRARYCARD.MEMBERTYPEID = MT.MEMBERTYPEID);

-- LIST OF CURRENT LOANS WHERE RETURNED IS 0
-- 01-DEC-2020 represents SYSDATE
CREATE VIEW CURRENT_LOANS AS (SELECT LOANID, CARDID, R.RESOURCENAME, LOANDATE, (LOANDATE + R.LOANPERIOD) "DUEDATE",
(CASE WHEN (LOANDATE + R.LOANPERIOD) < TO_DATE('01-DEC-2020', 'DD-MON-YYYY') THEN 'Yes' ELSE 'No' END) "IS OVERDUE"
FROM LOAN, LRESOURCE R
WHERE LOAN.RESOURCEID = R.RESOURCEID AND LOAN.RETURNDATE IS NULL);


-- LIST OF FINES 
-- 01-DEC-2020 represents SYSDATE
CREATE VIEW FINES AS (SELECT F.LOANID, L.CARDID, F.ISPAID, F.PAYDATE, L.LOANDATE,
ROUND((CASE WHEN L.RETURNDATE IS NOT NULL THEN (L.RETURNDATE - L.LOANDATE - R.LOANPERIOD)
ELSE (TO_DATE('01-DEC-2020', 'DD-MON-YYYY') - L.LOANDATE - R.LOANPERIOD) END),3) "FINE AMOUNT ($)"
FROM FINE F
INNER JOIN LOAN L ON F.LOANID = L.LOANID
INNER JOIN LRESOURCE R ON L.RESOURCEID = R.RESOURCEID);
-- 
-- 
-- 
-- QUERIES
-- LIST OF STUDENTS AND STAFF WHO ARE SUSPENDED
SELECT CARDID, FIRSTNAME, LASTNAME
FROM LIBRARYCARD
WHERE ISSUSPENDED = 1;

--AVERAGE LOAN LENGTH
SELECT ROUND(AVG(RETURNDATE - LOANDATE),2) "AVERAGE LOAN LENGHT", MAX(RETURNDATE - LOANDATE) MAX,
MIN(RETURNDATE - LOANDATE) MIN
FROM LOAN;

--list of resources that user A loaned and resources that both user A and B loaned
SELECT DISTINCT LR.RESOURCENAME, CARDID
FROM LOAN
INNER JOIN LRESOURCE LR ON LR.RESOURCEID = LOAN.RESOURCEID
LEFT OUTER JOIN 
(SELECT LIBR.RESOURCENAME FROM LRESOURCE LIBR, LOAN 
WHERE LIBR.RESOURCEID = LOAN.RESOURCEID
AND LOAN.CARDID = 435995120)LIBR ON LR.RESOURCENAME = LIBR.RESOURCENAME
WHERE CARDID = 72350962;

-- FIND A RESOURCE WITH CERTAIN TITLE
SELECT LR.RESOURCENAME, LR.RESOURCEID, C.COURSENAME, LOCATION, RT.RESOURCETYPE, LR.AUTHOR, LR.LOANPERIOD
FROM LRESOURCE LR
INNER JOIN COURSE C ON LR.COURSENO = C.COURSENO
INNER JOIN RESOURCETYPE RT ON LR.RESOURCETYPEID = RT.RESOURCETYPEID
WHERE lower(LR.RESOURCENAME) LIKE '%history%';

-- FIND ALL LOANS FROM 2019
SELECT LOANID, CARDID, LR.RESOURCENAME, TO_CHAR(LOANDATE, 'MM/DD/YYYY') LOANDATE, RETURNDATE
FROM LOAN, LRESOURCE LR
WHERE LOAN.RESOURCEID = LR.RESOURCEID
AND EXTRACT(YEAR FROM LOANDATE) = 2019;

--NUMBER OF LOANS PER EACH MONTH
SELECT EXTRACT(MONTH FROM LOANDATE) "MONTH NUMBER", TO_CHAR(LOANDATE,'MON') "MONTH", COUNT(*)
FROM LOAN
GROUP BY EXTRACT(MONTH FROM LOANDATE), TO_CHAR(LOANDATE,'MON')
ORDER BY 1;

-- LIST MOST POPULAR RESOURCES DESCENDING
SELECT DISTINCT R.RESOURCENAME, 
(SELECT COUNT(*) FROM LOAN WHERE LOAN.RESOURCEID 
IN (SELECT RESOURCEID FROM LRESOURCE WHERE RESOURCENAME = R.RESOURCENAME)
) "TOTAL LOANS"
FROM LRESOURCE R
ORDER BY 2 DESC;

-- LIST OF RESOURCES PER COURSE
SELECT LR.COURSENO, COUNT(*) "NUM OF RESOURCES"
FROM LRESOURCE LR, COURSE C
WHERE LR.COURSENO = C.COURSENO
GROUP BY LR.COURSENO
ORDER BY 2 DESC;

--LIST OF RESOURCES THAT HAVE NEVER BEEN LOANED
SELECT DISTINCT RESOURCENAME, AUTHOR 
FROM LRESOURCE
WHERE RESOURCEID NOT IN (SELECT RESOURCEID FROM LOAN);

-- RESOURCES LOANED MORE THAN ONE TIME
SELECT L.RESOURCEID, LR.RESOURCENAME, COUNT(L.RESOURCEID)
FROM LOAN L, LRESOURCE LR
WHERE L.RESOURCEID = LR.RESOURCEID
GROUP BY L.RESOURCEID, LR.RESOURCENAME
HAVING COUNT(*) > 1;

--List of resources currently available for loan
SELECT RESOURCEID, RESOURCENAME,AUTHOR, LOANPERIOD
FROM LRESOURCE
WHERE LOANPERIOD > 0 
AND RESOURCEID
NOT IN (SELECT RESOURCEID FROM LOAN WHERE RETURNDATE IS NULL);

--SUM OF ALL FINES ROUNDED TO 2 DECIMALS
SELECT SUM(ROUND((CASE WHEN L.RETURNDATE IS NOT NULL THEN (L.RETURNDATE - L.LOANDATE - R.LOANPERIOD)
ELSE (TO_DATE('01-DEC-2020', 'DD-MON-YYYY') - L.LOANDATE - R.LOANPERIOD) END),2)) "FINE AMOUNT ($)"
FROM FINE F
INNER JOIN LOAN L ON F.LOANID = L.LOANID
INNER JOIN LRESOURCE R ON L.RESOURCEID = R.RESOURCEID;











